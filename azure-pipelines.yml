trigger:
- main

pool:
  name: 'SH'

variables:
  azureSubscription: 'Azure subscription 1'
  resourceGroup: 'MyResourceGroup'
  aksClusterName: 'MyK8sCluster'
  location: 'westus'
  nodeCount: 2

stages:
- stage: CreateCluster
  displayName: "Create AKS Cluster"
  jobs:
  - job: CreateClusterJob
    displayName: "Create AKS Cluster"
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          if az aks show --resource-group $(resourceGroup) --name $(aksClusterName) &>/dev/null; then
            echo "AKS cluster $(aksClusterName) already exists. Skipping creation."
          else
            echo "Creating AKS cluster..."
            az aks create \
              --resource-group $(resourceGroup) \
              --name $(aksClusterName) \
              --node-count $(nodeCount) \
              --location $(location) \
              --generate-ssh-keys
          fi

- stage: InstallIngress
  displayName: "Install Nginx Ingress Controller"
  jobs:
  - job: InstallIngressJob
    displayName: "Install Nginx Ingress Controller"
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az aks get-credentials --resource-group $(resourceGroup) --name $(aksClusterName)
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          helm install nginx-ingress ingress-nginx/ingress-nginx --create-namespace --namespace ingress-nginx

- stage: GetLoadBalancerIP
  displayName: "Get LoadBalancer IP"
  jobs:
  - job: GetLoadBalancerIPJob
    displayName: "Get LoadBalancer IP"
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Waiting for LoadBalancer IP to be assigned..."
          LB_IP=""
          while [ -z "$LB_IP" ]; do
            LB_IP=$(kubectl get svc -n ingress-nginx -o=jsonpath='{.items[0].status.loadBalancer.ingress[0].ip}')
            if [ -z "$LB_IP" ]; then
              echo "LoadBalancer IP not assigned yet, retrying..."
              sleep 10
            fi
          done
          echo "LoadBalancer IP: $LB_IP"
          echo "##vso[task.setvariable variable=lbIP]$LB_IP" # Set as a variable for further use

- stage: DeployIngress
  displayName: "Deploy Ingress"
  jobs:
  - job: DeployIngressJob
    displayName: "Deploy Ingress"
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Applying Ingress configuration with LoadBalancer IP"
          sed -i 's/<LB_IP>/$(lbIP)/' kubernetes/ingress.yaml
          kubectl apply -f kubernetes/ingress.yaml
